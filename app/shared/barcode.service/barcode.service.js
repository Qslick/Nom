"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/map");
var BarcodeService = (function () {
    function BarcodeService(http) {
        this.http = http;
        this.apiKeyUPC = "ccc8303bdf3e6d6f0d8547f2f7397e88";
        this.apiKeyUSDA = "6FACbOhHgM9wNvz9TuUOU6SUQ8DgyvJnz5njg0oV";
    }
    BarcodeService.prototype.getItem = function (upc) {
        console.log("In getItem() - UPC: " + upc);
        this.upc = upc;
        this.queuePromise();
    };
    BarcodeService.prototype.queuePromise = function () {
        var upcLookupURL = "http://api.upcdatabase.org/json/"
            + this.apiKeyUPC
            + "/"
            + this.upc;
        console.log("queuePromise() - UPC Lookup URL: " + upcLookupURL);
        // console.log("queuePromise() - NDB Lookup URL: " + ndbLookupURL);
        function queryUPC() {
            console.log("queryUPC()");
            return fetch(upcLookupURL).then(function (response) {
                return response.json();
                // return response.json();
            }).then(function (data) {
                return data;
            }).catch(function (ex) {
                // console.error('Error fetching UPC', ex);
                return ex;
            });
        }
        function queryNDB(res) {
            console.log("\nqueryNDB() - UPC lookup results: " + JSON.stringify(res));
            var apiKeyUSDA = "6FACbOhHgM9wNvz9TuUOU6SUQ8DgyvJnz5njg0oV";
            alert(res.description);
            var desc = res.description;
            var searchTerms = desc.split(" ");
            var searchString = "";
            for (var i = 0; i < searchTerms.length - 1; i++) {
                searchString += searchTerms[i] + " ";
            }
            var ndbLookupURL = " https://api.nal.usda.gov/ndb/search/?format=json&q=" + searchString + "&sort=r&max=10&offset=0&api_key="
                + apiKeyUSDA;
            console.log("NDNno URL: " + ndbLookupURL);
            // let ndbLookupURL = " https://api.nal.usda.gov/ndb/search/?format=json&q=Tea,Bags,Benner,Green,Tea,Lemon,and,Ginseng&sort=n&max=25&offset=0&api_key="
            //     + this.apiKeyUSDA;
            return fetch(ndbLookupURL).then(function (response) {
                return response.json();
            }).then(function (data) {
                return data;
            }).catch(function (ex) {
                return ex;
            });
        }
        function queryUSDA(res) {
            // console.log("USDA Response: " + JSON.stringify(res));
            // console.log("NDBno: " + JSON.stringify(res.list.item));
            var itemDetailList = res.list.item;
            var NDBno = itemDetailList[0].ndbno;
            console.log("NDBno: " + NDBno);
            var usdaLookupUrl = " https://api.nal.usda.gov/ndb/reports/?ndbno="
                + NDBno + "& type=b&format=json&api_key=6FACbOhHgM9wNvz9TuUOU6SUQ8DgyvJnz5njg0oV";
            console.log("USDA Lookup Url: " + usdaLookupUrl);
            return fetch(usdaLookupUrl).then(function (response) {
                return response.json();
            }).then(function (data) {
                // console.log("Data: " + JSON.stringify(data.ing.desc));
                return data;
            }).catch(function (ex) {
                return ex;
            });
        }
        var queryArr = [queryUPC, queryNDB, queryUSDA];
        var list = this.exicuteQueiry(queryArr)[2];
    };
    BarcodeService.prototype.exicuteQueiry = function (list) {
        var p = Promise.resolve();
        return list.reduce(function (pacc, fn) {
            return pacc = pacc.then(fn);
        }, p);
    };
    return BarcodeService;
}());
BarcodeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], BarcodeService);
exports.BarcodeService = BarcodeService;
//# sourceMappingURL=data:application/json;base64,